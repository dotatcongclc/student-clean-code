using System;
using System.Collections.Generic;
using System.Linq;

// ========== Interface chung ==========
public interface IManager<T>
{
    void Add(T item);
    void Remove(string id);
    void Update(string id, T updatedItem);
    List<T> GetAll();
    T FindById(string id);
    List<T> FindByName(string name);
}

// ========== Entity: Student ==========
public class Student
{
    public string Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
    public double GPA { get; set; }

    public override string ToString()
    {
        return $"ID:{Id}, Name:{Name}, Age:{Age}, GPA:{GPA}";
    }
}

// ========== Manager: ch·ªâ lo d·ªØ li·ªáu ==========
public class StudentManager : IManager<Student>
{
    private List<Student> students = new List<Student>();

    public void Add(Student s)
    {
        if (string.IsNullOrWhiteSpace(s.Name))
            throw new ArgumentException("‚ö† T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        if (s.Age <= 0)
            throw new ArgumentException("‚ö† Tu·ªïi ph·∫£i > 0!");
        if (s.GPA < 0 || s.GPA > 10)
            throw new ArgumentException("‚ö† GPA ph·∫£i trong kho·∫£ng 0‚Äì10!");

        students.Add(s);
    }

    public void Remove(string id)
    {
        students.RemoveAll(s => s.Id == id);
    }

    public void Update(string id, Student updatedItem)
    {
        var st = students.FirstOrDefault(s => s.Id == id);
        if (st != null)
        {
            st.Name = updatedItem.Name;
            st.Age = updatedItem.Age;
            st.GPA = updatedItem.GPA;
        }
    }

    public List<Student> GetAll() => students;

    public Student FindById(string id) =>
        students.FirstOrDefault(s => s.Id == id);

    public List<Student> FindByName(string name) =>
        students.Where(s => s.Name.Equals(name, StringComparison.OrdinalIgnoreCase)).ToList();

    public List<Student> FindExcellent() =>
        students.Where(s => s.GPA > 8).ToList();

    public void SortByName() =>
        students = students.OrderBy(s => s.Name).ToList();

    public void SortByGPA() =>
        students = students.OrderByDescending(s => s.GPA).ToList();
}

// ========== Menu: ch·ªâ lo giao di·ªán ==========
public class StudentMenu
{
    private readonly StudentManager manager;
    public StudentMenu(StudentManager mgr) { manager = mgr; }

    private int ReadInt(string msg)
    {
        Console.Write(msg);
        if (!int.TryParse(Console.ReadLine(), out int v) || v < 0)
            throw new Exception("‚ö† Gi√° tr·ªã ph·∫£i l√† s·ªë nguy√™n >= 0!");
        return v;
    }

    private double ReadDouble(string msg)
    {
        Console.Write(msg);
        if (!double.TryParse(Console.ReadLine(), out double v) || v < 0 || v > 10)
            throw new Exception("‚ö† GPA ph·∫£i t·ª´ 0‚Äì10!");
        return v;
    }

    public void Show()
    {
        int choice = 0;
        while (choice != 9)
        {
            Console.WriteLine("\n--- QU·∫¢N L√ù SINH VI√äN ---");
            Console.WriteLine("1. Th√™m SV");
            Console.WriteLine("2. Xo√° SV");
            Console.WriteLine("3. C·∫≠p nh·∫≠t SV");
            Console.WriteLine("4. Hi·ªÉn th·ªã t·∫•t c·∫£ SV");
            Console.WriteLine("5. T√¨m SV theo t√™n");
            Console.WriteLine("6. T√¨m SV GPA > 8");
            Console.WriteLine("7. S·∫Øp x·∫øp theo t√™n");
            Console.WriteLine("8. S·∫Øp x·∫øp theo GPA");
            Console.WriteLine("9. Quay l·∫°i");
            Console.Write("üëâ Ch·ªçn: ");

            if (!int.TryParse(Console.ReadLine(), out choice)) choice = 0;

            try
            {
                switch (choice)
                {
                    case 1:
                        var s = new Student
                        {
                            Id = Guid.NewGuid().ToString("N").Substring(0, 5),
                            Name = Prompt("T√™n: "),
                            Age = ReadInt("Tu·ªïi: "),
                            GPA = ReadDouble("GPA: ")
                        };
                        manager.Add(s);
                        Console.WriteLine("‚úÖ Th√™m th√†nh c√¥ng!");
                        break;

                    case 2:
                        Console.Write("Nh·∫≠p ID xo√°: ");
                        manager.Remove(Console.ReadLine());
                        Console.WriteLine("‚úÖ ƒê√£ xo√° (n·∫øu t·ªìn t·∫°i).");
                        break;

                    case 3:
                        Console.Write("Nh·∫≠p ID c·∫ßn c·∫≠p nh·∫≠t: ");
                        string id = Console.ReadLine();
                        var up = new Student
                        {
                            Id = id,
                            Name = Prompt("T√™n m·ªõi: "),
                            Age = ReadInt("Tu·ªïi m·ªõi: "),
                            GPA = ReadDouble("GPA m·ªõi: ")
                        };
                        manager.Update(id, up);
                        Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t xong.");
                        break;

                    case 4:
                        var all = manager.GetAll();
                        if (all.Count == 0) Console.WriteLine("‚ö† Ch∆∞a c√≥ sinh vi√™n n√†o!");
                        else all.ForEach(Console.WriteLine);
                        break;

                    case 5:
                        string name = Prompt("Nh·∫≠p t√™n: ");
                        var found = manager.FindByName(name);
                        if (found.Count == 0) Console.WriteLine("‚ö† Kh√¥ng t√¨m th·∫•y!");
                        else found.ForEach(Console.WriteLine);
                        break;

                    case 6:
                        var excellent = manager.FindExcellent();
                        if (excellent.Count == 0) Console.WriteLine("‚ö† Kh√¥ng c√≥ SV GPA > 8!");
                        else excellent.ForEach(Console.WriteLine);
                        break;

                    case 7:
                        manager.SortByName();
                        Console.WriteLine("‚úÖ ƒê√£ s·∫Øp x·∫øp theo t√™n.");
                        break;

                    case 8:
                        manager.SortByGPA();
                        Console.WriteLine("‚úÖ ƒê√£ s·∫Øp x·∫øp theo GPA.");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private string Prompt(string msg)
    {
        Console.Write(msg);
        return Console.ReadLine();
    }
}

// ========== Ch∆∞∆°ng tr√¨nh ch√≠nh ==========
public class Program
{
    public static void Main(string[] args)
    {
        var manager = new StudentManager();
        var menu = new StudentMenu(manager);
        menu.Show();
    }
}
